/**
 * üë• SERVICIO DE USUARIOS
 * 
 * Este m√≥dulo contiene todas las operaciones relacionadas con usuarios:
 * - Crear usuarios
 * - Buscar usuarios
 * - Actualizar informaci√≥n de usuarios
 * - Gestionar configuraciones de usuario
 */

import { ObjectId } from 'mongodb';
import { getUsersCollection, getConfigurationsCollection, ensureIndexes } from './mongodb.js';
import { hashPassword, verifyPassword, validateUserData, validateEmail } from './auth.js';

/**
 * üë§ FUNCI√ìN PARA CREAR UN NUEVO USUARIO
 * 
 * Crea un nuevo usuario en la base de datos con validaci√≥n completa.
 * 
 * @param {Object} userData - Datos del usuario
 * @param {string} userData.name - Nombre del usuario
 * @param {string} userData.email - Email del usuario
 * @param {string} userData.password - Contrase√±a del usuario
 * @param {string} userData.confirmPassword - Confirmaci√≥n de contrase√±a
 * @returns {Promise<Object>} Usuario creado (sin contrase√±a)
 */
export async function createUser(userData) {
  console.log('üë§ Iniciando creaci√≥n de usuario para:', userData.email);

  try {
    // ‚úÖ PASO 1: Validar datos de entrada
    const validation = validateUserData(userData);
    if (!validation.isValid) {
      throw new Error(validation.errors.join(', '));
    }

    // ‚úÖ PASO 2: Verificar que el email no exista
    const existingUser = await findUserByEmail(userData.email);
    if (existingUser) {
      throw new Error('Este email ya est√° registrado');
    }

    // ‚úÖ PASO 3: Hashear la contrase√±a
    const hashedPassword = await hashPassword(userData.password);

    // ‚úÖ PASO 4: Preparar datos del usuario
    const userToCreate = {
      name: userData.name.trim(),
      email: userData.email.toLowerCase().trim(),
      password: hashedPassword,
      createdAt: new Date(),
      lastLoginAt: new Date(),
      isActive: true,
      // Campos adicionales opcionales
      preferences: {
        language: 'es-MX',
        theme: 'system',
        notifications: true,
      },
    };

    // ‚úÖ PASO 5: Insertar en la base de datos
    const usersCollection = await getUsersCollection();
    await ensureIndexes(); // Asegurar que los √≠ndices existan
    
    const result = await usersCollection.insertOne(userToCreate);
    
    if (!result.insertedId) {
      throw new Error('Error insertando usuario en la base de datos');
    }

    // ‚úÖ PASO 6: Retornar usuario sin contrase√±a
    const createdUser = {
      id: result.insertedId.toString(),
      name: userToCreate.name,
      email: userToCreate.email,
      createdAt: userToCreate.createdAt.toISOString(),
      lastLoginAt: userToCreate.lastLoginAt.toISOString(),
      preferences: userToCreate.preferences,
    };

    console.log('‚úÖ Usuario creado exitosamente:', createdUser.email);
    return createdUser;

  } catch (error) {
    console.error('‚ùå Error creando usuario:', error);
    throw error;
  }
}

/**
 * üîç FUNCI√ìN PARA BUSCAR USUARIO POR EMAIL
 * 
 * Busca un usuario en la base de datos por su email.
 * 
 * @param {string} email - Email del usuario
 * @returns {Promise<Object|null>} Usuario encontrado o null
 */
export async function findUserByEmail(email) {
  try {
    console.log('üîç Buscando usuario por email:', email);
    
    if (!validateEmail(email)) {
      console.log('‚ùå Email inv√°lido proporcionado');
      return null;
    }

    const usersCollection = await getUsersCollection();
    const user = await usersCollection.findOne({ 
      email: email.toLowerCase().trim() 
    });

    if (user) {
      console.log('‚úÖ Usuario encontrado:', user.email);
      // Convertir ObjectId a string para el frontend
      user.id = user._id.toString();
      delete user._id;
    } else {
      console.log('‚ùå Usuario no encontrado');
    }

    return user;
  } catch (error) {
    console.error('‚ùå Error buscando usuario por email:', error);
    return null;
  }
}

/**
 * üÜî FUNCI√ìN PARA BUSCAR USUARIO POR ID
 * 
 * Busca un usuario en la base de datos por su ID.
 * 
 * @param {string} userId - ID del usuario
 * @returns {Promise<Object|null>} Usuario encontrado o null
 */
export async function findUserById(userId) {
  try {
    console.log('üÜî Buscando usuario por ID:', userId);
    
    if (!ObjectId.isValid(userId)) {
      console.log('‚ùå ID de usuario inv√°lido');
      return null;
    }

    const usersCollection = await getUsersCollection();
    const user = await usersCollection.findOne({ 
      _id: new ObjectId(userId) 
    });

    if (user) {
      console.log('‚úÖ Usuario encontrado por ID:', user.email);
      // Convertir ObjectId a string y remover contrase√±a
      user.id = user._id.toString();
      delete user._id;
      delete user.password; // No retornar contrase√±a
    } else {
      console.log('‚ùå Usuario no encontrado por ID');
    }

    return user;
  } catch (error) {
    console.error('‚ùå Error buscando usuario por ID:', error);
    return null;
  }
}

/**
 * üîê FUNCI√ìN PARA AUTENTICAR USUARIO
 * 
 * Verifica las credenciales de un usuario (email y contrase√±a).
 * 
 * @param {string} email - Email del usuario
 * @param {string} password - Contrase√±a del usuario
 * @returns {Promise<Object|null>} Usuario autenticado o null
 */
export async function authenticateUser(email, password) {
  try {
    console.log('üîê Autenticando usuario:', email);

    // ‚úÖ PASO 1: Buscar usuario por email
    const user = await findUserByEmail(email);
    if (!user) {
      console.log('‚ùå Usuario no encontrado para autenticaci√≥n');
      return null;
    }

    // ‚úÖ PASO 2: Verificar contrase√±a
    const isPasswordValid = await verifyPassword(password, user.password);
    if (!isPasswordValid) {
      console.log('‚ùå Contrase√±a inv√°lida para usuario:', email);
      return null;
    }

    // ‚úÖ PASO 3: Actualizar √∫ltimo login
    await updateLastLogin(user.id);

    // ‚úÖ PASO 4: Retornar usuario sin contrase√±a
    delete user.password;
    user.lastLoginAt = new Date().toISOString();

    console.log('‚úÖ Usuario autenticado exitosamente:', email);
    return user;

  } catch (error) {
    console.error('‚ùå Error autenticando usuario:', error);
    return null;
  }
}

/**
 * ‚è∞ FUNCI√ìN PARA ACTUALIZAR √öLTIMO LOGIN
 * 
 * Actualiza la fecha de √∫ltimo login del usuario.
 * 
 * @param {string} userId - ID del usuario
 */
export async function updateLastLogin(userId) {
  try {
    console.log('‚è∞ Actualizando √∫ltimo login para usuario:', userId);
    
    const usersCollection = await getUsersCollection();
    await usersCollection.updateOne(
      { _id: new ObjectId(userId) },
      { $set: { lastLoginAt: new Date() } }
    );

    console.log('‚úÖ √öltimo login actualizado');
  } catch (error) {
    console.error('‚ùå Error actualizando √∫ltimo login:', error);
    // No lanzar error, es una operaci√≥n secundaria
  }
}

/**
 * ‚öôÔ∏è FUNCI√ìN PARA GUARDAR CONFIGURACI√ìN DE USUARIO
 * 
 * Guarda o actualiza la configuraci√≥n de Notion del usuario.
 * 
 * @param {string} userId - ID del usuario
 * @param {Object} config - Configuraci√≥n a guardar
 * @param {string} config.notionToken - Token de Notion
 * @param {string} config.databaseId - ID de la base de datos de Notion
 * @param {string} config.workspaceName - Nombre del workspace (opcional)
 * @returns {Promise<Object>} Configuraci√≥n guardada
 */
export async function saveUserConfiguration(userId, config) {
  try {
    console.log('‚öôÔ∏è Guardando configuraci√≥n para usuario:', userId);

    // ‚úÖ Validar datos de entrada
    if (!config.notionToken || !config.databaseId) {
      throw new Error('Token de Notion y Database ID son requeridos');
    }

    const configToSave = {
      userId: new ObjectId(userId),
      type: 'notion',
      notionToken: config.notionToken,
      databaseId: config.databaseId,
      workspaceName: config.workspaceName || '',
      createdAt: new Date(),
      updatedAt: new Date(),
      isActive: true,
    };

    const configurationsCollection = await getConfigurationsCollection();
    
    // Usar upsert para actualizar si existe o crear si no existe
    const result = await configurationsCollection.replaceOne(
      { userId: new ObjectId(userId), type: 'notion' },
      configToSave,
      { upsert: true }
    );

    console.log('‚úÖ Configuraci√≥n guardada exitosamente');
    
    // Retornar configuraci√≥n sin token sensible
    return {
      id: result.upsertedId?.toString() || 'updated',
      userId: userId,
      databaseId: config.databaseId,
      workspaceName: config.workspaceName,
      updatedAt: configToSave.updatedAt.toISOString(),
    };

  } catch (error) {
    console.error('‚ùå Error guardando configuraci√≥n:', error);
    throw error;
  }
}

/**
 * üìñ FUNCI√ìN PARA OBTENER CONFIGURACI√ìN DE USUARIO
 * 
 * Obtiene la configuraci√≥n de Notion del usuario.
 * 
 * @param {string} userId - ID del usuario
 * @returns {Promise<Object|null>} Configuraci√≥n del usuario o null
 */
export async function getUserConfiguration(userId) {
  try {
    console.log('üìñ Obteniendo configuraci√≥n para usuario:', userId);

    const configurationsCollection = await getConfigurationsCollection();
    const config = await configurationsCollection.findOne({
      userId: new ObjectId(userId),
      type: 'notion',
      isActive: true,
    });

    if (config) {
      console.log('‚úÖ Configuraci√≥n encontrada');
      return {
        id: config._id.toString(),
        userId: userId,
        notionToken: config.notionToken,
        databaseId: config.databaseId,
        workspaceName: config.workspaceName,
        updatedAt: config.updatedAt.toISOString(),
      };
    } else {
      console.log('‚ùå Configuraci√≥n no encontrada');
      return null;
    }

  } catch (error) {
    console.error('‚ùå Error obteniendo configuraci√≥n:', error);
    return null;
  }
}

/**
 * üóëÔ∏è FUNCI√ìN PARA ELIMINAR CONFIGURACI√ìN DE USUARIO
 * 
 * Elimina la configuraci√≥n de Notion del usuario.
 * 
 * @param {string} userId - ID del usuario
 * @returns {Promise<boolean>} true si se elimin√≥ exitosamente
 */
export async function deleteUserConfiguration(userId) {
  try {
    console.log('üóëÔ∏è Eliminando configuraci√≥n para usuario:', userId);

    const configurationsCollection = await getConfigurationsCollection();
    const result = await configurationsCollection.deleteOne({
      userId: new ObjectId(userId),
      type: 'notion',
    });

    const success = result.deletedCount > 0;
    console.log(`${success ? '‚úÖ' : '‚ùå'} Configuraci√≥n ${success ? 'eliminada' : 'no encontrada'}`);
    
    return success;

  } catch (error) {
    console.error('‚ùå Error eliminando configuraci√≥n:', error);
    return false;
  }
}

/**
 * üìä FUNCI√ìN PARA OBTENER CONFIGURACIONES DE USUARIO
 * 
 * Obtiene todas las configuraciones de la aplicaci√≥n del usuario.
 * 
 * @param {string} userId - ID del usuario
 * @returns {Promise<Object|null>} Configuraciones del usuario o null
 */
export async function getUserAppConfigurations(userId) {
  try {
    console.log('üìä Obteniendo configuraciones de app para usuario:', userId);

    const configurationsCollection = await getConfigurationsCollection();
    const config = await configurationsCollection.findOne({
      userId: new ObjectId(userId),
      type: 'app-config',
      isActive: true,
    });

    if (config) {
      console.log('‚úÖ Configuraciones de app encontradas');
      return {
        id: config._id.toString(),
        userId: userId,
        scanConfigurations: config.scanConfigurations || [],
        displayConfigurations: config.displayConfigurations || [],
        activeDisplayConfig: config.activeDisplayConfig || null,
        scanHistory: config.scanHistory || [],
        demoMode: config.demoMode || false,
        updatedAt: config.updatedAt.toISOString(),
      };
    } else {
      console.log('‚ùå Configuraciones de app no encontradas');
      return null;
    }

  } catch (error) {
    console.error('‚ùå Error obteniendo configuraciones de app:', error);
    return null;
  }
}

/**
 * üíæ FUNCI√ìN PARA GUARDAR CONFIGURACIONES DE USUARIO
 * 
 * Guarda las configuraciones de la aplicaci√≥n del usuario.
 * 
 * @param {string} userId - ID del usuario
 * @param {Object} config - Configuraciones a guardar
 * @returns {Promise<Object>} Configuraci√≥n guardada
 */
export async function saveUserAppConfigurations(userId, config) {
  try {
    console.log('üíæ Guardando configuraciones de app para usuario:', userId);

    const configToSave = {
      userId: new ObjectId(userId),
      type: 'app-config',
      scanConfigurations: config.scanConfigurations || [],
      displayConfigurations: config.displayConfigurations || [],
      activeDisplayConfig: config.activeDisplayConfig || null,
      scanHistory: config.scanHistory || [],
      demoMode: config.demoMode || false,
      createdAt: new Date(),
      updatedAt: new Date(),
      isActive: true,
    };

    const configurationsCollection = await getConfigurationsCollection();
    
    // Usar upsert para actualizar si existe o crear si no existe
    const result = await configurationsCollection.replaceOne(
      { userId: new ObjectId(userId), type: 'app-config' },
      configToSave,
      { upsert: true }
    );

    console.log('‚úÖ Configuraciones de app guardadas exitosamente');
    
    return {
      id: result.upsertedId?.toString() || 'updated',
      userId: userId,
      scanConfigurations: configToSave.scanConfigurations,
      displayConfigurations: configToSave.displayConfigurations,
      activeDisplayConfig: configToSave.activeDisplayConfig,
      scanHistory: configToSave.scanHistory,
      demoMode: configToSave.demoMode,
      updatedAt: configToSave.updatedAt.toISOString(),
    };

  } catch (error) {
    console.error('‚ùå Error guardando configuraciones de app:', error);
    throw error;
  }
}

/**
 * üóëÔ∏è FUNCI√ìN PARA ELIMINAR CONFIGURACIONES DE USUARIO
 * 
 * Elimina las configuraciones de la aplicaci√≥n del usuario.
 * 
 * @param {string} userId - ID del usuario
 * @returns {Promise<boolean>} true si se elimin√≥ exitosamente
 */
export async function deleteUserAppConfigurations(userId) {
  try {
    console.log('üóëÔ∏è Eliminando configuraciones de app para usuario:', userId);

    const configurationsCollection = await getConfigurationsCollection();
    const result = await configurationsCollection.deleteOne({
      userId: new ObjectId(userId),
      type: 'app-config',
    });

    const success = result.deletedCount > 0;
    console.log(`${success ? '‚úÖ' : '‚ùå'} Configuraciones de app ${success ? 'eliminadas' : 'no encontradas'}`);
    
    return success;

  } catch (error) {
    console.error('‚ùå Error eliminando configuraciones de app:', error);
    return false;
  }
}