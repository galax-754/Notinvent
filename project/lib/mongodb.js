/**
 * üóÑÔ∏è UTILIDAD DE CONEXI√ìN A MONGODB
 * 
 * Esta utilidad maneja la conexi√≥n a MongoDB Atlas de forma eficiente,
 * reutilizando conexiones existentes para evitar crear m√∫ltiples conexiones
 * en cada request de las funciones serverless.
 * 
 * IMPORTANTE: Las funciones serverless pueden reutilizar conexiones entre
 * requests si la funci√≥n permanece "caliente", por lo que cachear la conexi√≥n
 * mejora significativamente el rendimiento.
 */

import { MongoClient } from 'mongodb';

// ‚úÖ CONFIGURACI√ìN DE CONEXI√ìN
const MONGODB_URI = process.env.MONGODB_URI;
const MONGODB_DB = process.env.MONGODB_DB || 'notion_inventory';

// Validar que la URI est√© configurada
if (!MONGODB_URI) {
  throw new Error(
    '‚ùå Por favor define la variable de entorno MONGODB_URI en tu archivo .env.local'
  );
}

/**
 * üîÑ CACHE DE CONEXI√ìN GLOBAL
 * 
 * En el entorno serverless, las variables globales persisten entre requests
 * si la funci√≥n permanece "caliente". Esto nos permite reutilizar la conexi√≥n
 * a MongoDB sin tener que reconectar en cada request.
 */
let cachedClient = null;
let cachedDb = null;

/**
 * üöÄ FUNCI√ìN PRINCIPAL DE CONEXI√ìN
 * 
 * Esta funci√≥n:
 * 1. Verifica si ya existe una conexi√≥n activa (cache)
 * 2. Si no existe, crea una nueva conexi√≥n
 * 3. Retorna tanto el cliente como la base de datos
 * 
 * @returns {Promise<{client: MongoClient, db: Db}>} Cliente y base de datos de MongoDB
 */
export async function connectToDatabase() {
  console.log('üîç Verificando conexi√≥n a MongoDB...');

  // ‚úÖ PASO 1: Verificar cache existente
  if (cachedClient && cachedDb) {
    console.log('‚úÖ Reutilizando conexi√≥n existente a MongoDB');
    return {
      client: cachedClient,
      db: cachedDb,
    };
  }

  console.log('üîÑ Creando nueva conexi√≥n a MongoDB...');

  try {
    // ‚úÖ PASO 2: Crear nueva conexi√≥n
    const client = new MongoClient(MONGODB_URI, {
      // Opciones de conexi√≥n optimizadas para serverless
      maxPoolSize: 10, // M√°ximo 10 conexiones en el pool
      serverSelectionTimeoutMS: 5000, // Timeout de 5 segundos
      socketTimeoutMS: 45000, // Timeout de socket de 45 segundos
      bufferMaxEntries: 0, // Deshabilitar buffering
      bufferCommands: false, // Deshabilitar buffering de comandos
    });

    // ‚úÖ PASO 3: Conectar al cliente
    await client.connect();
    console.log('üéâ Conexi√≥n a MongoDB establecida exitosamente');

    // ‚úÖ PASO 4: Obtener referencia a la base de datos
    const db = client.db(MONGODB_DB);

    // ‚úÖ PASO 5: Guardar en cache para reutilizar
    cachedClient = client;
    cachedDb = db;

    return {
      client: cachedClient,
      db: cachedDb,
    };
  } catch (error) {
    console.error('‚ùå Error conectando a MongoDB:', error);
    throw new Error(`Error de conexi√≥n a MongoDB: ${error.message}`);
  }
}

/**
 * üîê FUNCI√ìN PARA OBTENER COLECCI√ìN DE USUARIOS
 * 
 * Funci√≥n helper que retorna la colecci√≥n de usuarios.
 * Incluye la conexi√≥n autom√°tica a la base de datos.
 * 
 * @returns {Promise<Collection>} Colecci√≥n de usuarios
 */
export async function getUsersCollection() {
  const { db } = await connectToDatabase();
  return db.collection('users');
}

/**
 * ‚öôÔ∏è FUNCI√ìN PARA OBTENER COLECCI√ìN DE CONFIGURACIONES
 * 
 * Funci√≥n helper que retorna la colecci√≥n de configuraciones de usuario.
 * Aqu√≠ se guardan los tokens de Notion y configuraciones personalizadas.
 * 
 * @returns {Promise<Collection>} Colecci√≥n de configuraciones
 */
export async function getConfigurationsCollection() {
  const { db } = await connectToDatabase();
  return db.collection('user_configurations');
}

/**
 * üìä FUNCI√ìN PARA OBTENER COLECCI√ìN DE HISTORIAL
 * 
 * Funci√≥n helper que retorna la colecci√≥n de historial de escaneos.
 * 
 * @returns {Promise<Collection>} Colecci√≥n de historial
 */
export async function getScanHistoryCollection() {
  const { db } = await connectToDatabase();
  return db.collection('scan_history');
}

/**
 * üßπ FUNCI√ìN DE LIMPIEZA (OPCIONAL)
 * 
 * Esta funci√≥n cierra la conexi√≥n a MongoDB. Generalmente no es necesaria
 * en funciones serverless ya que Vercel maneja el ciclo de vida autom√°ticamente,
 * pero puede ser √∫til para testing o casos especiales.
 */
export async function closeConnection() {
  if (cachedClient) {
    console.log('üîå Cerrando conexi√≥n a MongoDB...');
    await cachedClient.close();
    cachedClient = null;
    cachedDb = null;
    console.log('‚úÖ Conexi√≥n a MongoDB cerrada');
  }
}

/**
 * üè• FUNCI√ìN DE VERIFICACI√ìN DE SALUD
 * 
 * Verifica que la conexi√≥n a MongoDB est√© funcionando correctamente.
 * √ötil para endpoints de health check.
 * 
 * @returns {Promise<boolean>} true si la conexi√≥n est√° activa
 */
export async function checkDatabaseHealth() {
  try {
    const { db } = await connectToDatabase();
    // Hacer un ping simple a la base de datos
    await db.admin().ping();
    console.log('üíö MongoDB est√° funcionando correctamente');
    return true;
  } catch (error) {
    console.error('üíî Error en health check de MongoDB:', error);
    return false;
  }
}

/**
 * üìù FUNCI√ìN PARA CREAR √çNDICES
 * 
 * Crea √≠ndices necesarios en las colecciones para optimizar las consultas.
 * Se ejecuta autom√°ticamente cuando es necesario.
 */
export async function ensureIndexes() {
  try {
    console.log('üìù Verificando √≠ndices de MongoDB...');
    
    const usersCollection = await getUsersCollection();
    const configurationsCollection = await getConfigurationsCollection();
    const historyCollection = await getScanHistoryCollection();

    // √çndices para usuarios
    await usersCollection.createIndex({ email: 1 }, { unique: true });
    await usersCollection.createIndex({ createdAt: 1 });

    // √çndices para configuraciones
    await configurationsCollection.createIndex({ userId: 1 });
    await configurationsCollection.createIndex({ userId: 1, type: 1 });

    // √çndices para historial
    await historyCollection.createIndex({ userId: 1 });
    await historyCollection.createIndex({ scanTime: -1 });
    await historyCollection.createIndex({ userId: 1, scanTime: -1 });

    console.log('‚úÖ √çndices de MongoDB verificados/creados');
  } catch (error) {
    console.error('‚ùå Error creando √≠ndices:', error);
    // No lanzar error, los √≠ndices son opcionales
  }
}